[{"content":"Well-thought-through product announcements will help increase feature awareness and engage users with new functionality. Just like sharing your public roadmap, it\u0026rsquo;s also a great way to let potential customers see that you\u0026rsquo;re constantly improving.\nFurther reading Read How to announce product updates and features ","date":"2023-09-07","id":0,"permalink":"/blog/example-post/","summary":"You can use blog posts for announcing product updates and features.","tags":[],"title":"Example Post"},{"content":"","date":"2023-09-07","id":1,"permalink":"/blog/","summary":"","tags":[],"title":"Blog"},{"content":"","date":"2023-09-07","id":2,"permalink":"/docs/exercises/","summary":"","tags":[],"title":"Exercises"},{"content":"","date":"2023-09-07","id":3,"permalink":"/docs/guides/","summary":"","tags":[],"title":"Guides"},{"content":"Guides lead a user through a specific task they want to accomplish, often with a sequence of steps. Writing a good guide requires thinking about what your users are trying to do.\nFurther reading Read about how-to guides in the Di√°taxis framework ","date":"2023-09-07","id":4,"permalink":"/docs/exercises/example-guide/","summary":"\u003cp\u003eGuides lead a user through a specific task they want to accomplish, often with a sequence of steps. Writing a good guide requires thinking about what your users are trying to do.\u003c/p\u003e","tags":[],"title":"Example Guide"},{"content":"Guides lead a user through a specific task they want to accomplish, often with a sequence of steps. Writing a good guide requires thinking about what your users are trying to do.\nFurther reading Read about how-to guides in the Di√°taxis framework ","date":"2023-09-07","id":5,"permalink":"/docs/guides/example-guide/","summary":"\u003cp\u003eGuides lead a user through a specific task they want to accomplish, often with a sequence of steps. Writing a good guide requires thinking about what your users are trying to do.\u003c/p\u003e","tags":[],"title":"Example Guide"},{"content":"üéØ Goal Create the foundation for a merchandise store application by setting up a Clean Architecture solution structure with the correct project dependencies, organizing all source code in a src directory.\nüìã Prerequisites Before beginning this exercise, you should:\nHave .NET SDK 9.0 or newer installed Have VS Code with C# Dev Kit extension installed Have basic understanding of ASP.NET Core MVC üìö Learning Objectives By the end of this exercise, you will:\nSet up a Clean Architecture solution structure from scratch Create projects for Domain, Application, Infrastructure, and Presentation layers Configure project references to enforce proper dependency flow Organize projects in a src directory for better code organization Verify the solution builds successfully üîç Why This Matters In real-world applications, Clean Architecture is crucial because:\nIt enables separation of concerns, making the codebase more maintainable It\u0026rsquo;s an industry standard approach for building scalable enterprise applications It will be foundational for all future functionality we\u0026rsquo;ll build throughout this course It makes the application more testable and less coupled to external frameworks üìù Step-by-Step Instructions Step 1: Create the Solution Structure Open a terminal and navigate to where you want to create your project.\nCreate a new solution and set up the src directory:\n# Create solution dotnet new sln -n MerchStore # Create src directory mkdir -p src # Create a gitignore file for .Net dotnet new gitignore\rCreate projects for each Clean Architecture layer in the src directory:\n# Domain Layer dotnet new classlib -o src/MerchStore.Domain # Application Layer dotnet new classlib -o src/MerchStore.Application # Infrastructure Layer dotnet new classlib -o src/MerchStore.Infrastructure # Presentation Layer (WebUI) dotnet new mvc -o src/MerchStore.WebUI\rAdd all projects to the solution:\n# Add projects to solution dotnet sln add src/MerchStore.Domain/MerchStore.Domain.csproj dotnet sln add src/MerchStore.Application/MerchStore.Application.csproj dotnet sln add src/MerchStore.Infrastructure/MerchStore.Infrastructure.csproj dotnet sln add src/MerchStore.WebUI/MerchStore.WebUI.csproj\rüí° Information\nsrc Directory: Separates source code from other solution artifacts like tests, docs, etc. Domain Layer: Contains enterprise/business logic and entities - the heart of your application Application Layer: Contains business rules specific to the application and orchestrates domain objects Infrastructure Layer: Implements interfaces defined in inner layers, contains database, external APIs WebUI: Acts as the presentation layer in Clean Architecture, handling user interactions ‚ö†Ô∏è Common Mistakes\nForgetting to organize projects in the src directory will make it harder to add test projects later Creating direct dependencies from inner to outer layers breaks Clean Architecture principles Having too many project references can lead to circular dependencies Step 2: Configure Project Dependencies Set up project references according to Clean Architecture principles (dependencies always point inward):\n# Application depends on Domain dotnet add src/MerchStore.Application/MerchStore.Application.csproj reference src/MerchStore.Domain/MerchStore.Domain.csproj # Infrastructure depends on Application (which already references Domain) dotnet add src/MerchStore.Infrastructure/MerchStore.Infrastructure.csproj reference src/MerchStore.Application/MerchStore.Application.csproj # WebUI depends on Infrastructure and Application dotnet add src/MerchStore.WebUI/MerchStore.WebUI.csproj reference src/MerchStore.Infrastructure/MerchStore.Infrastructure.csproj dotnet add src/MerchStore.WebUI/MerchStore.WebUI.csproj reference src/MerchStore.Application/MerchStore.Application.csproj\rüí° Information\nDependency Rule: This reference structure enforces the Dependency Rule of Clean Architecture Inner Layer Independence: Inner layers have no knowledge of outer layers Domain Purity: Domain has no dependencies on other project layers This approach ensures that business logic doesn\u0026rsquo;t depend on UI or database implementations Step 3: Set Up Basic Folder Structure Create the base folder structure in each project:\n# Domain Layer folders mkdir -p src/MerchStore.Domain/Entities mkdir -p src/MerchStore.Domain/ValueObjects mkdir -p src/MerchStore.Domain/Interfaces mkdir -p src/MerchStore.Domain/Common # Application Layer folders - service-based approach mkdir -p src/MerchStore.Application/Common/Interfaces mkdir -p src/MerchStore.Application/Products/Services mkdir -p src/MerchStore.Application/DTOs # Infrastructure Layer folders mkdir -p src/MerchStore.Infrastructure/Persistence mkdir -p src/MerchStore.Infrastructure/Persistence/Repositories mkdir -p src/MerchStore.Infrastructure/Services\rüí° Information\nEntities: Domain objects with identity and lifecycle Value Objects: Immutable objects defined by their attributes Repositories: Data access patterns that abstract the underlying data store Services: Contain business logic that doesn\u0026rsquo;t naturally fit in domain objects This folder structure promotes a good separation of concerns in your application Step 4: Remove the Example Class1.cs Files When you create a class library, an example class Class1.cs is created. You can safely remove these files:\nfind . -name \u0026#34;Class1.cs\u0026#34; -type f -delete\r‚ö†Ô∏è Common Mistakes\nLeaving unused template files can cause confusion for new developers Be careful not to delete other important files when running this command üß™ Final Tests Run the Application and Validate Your Work Build the entire solution to ensure all projects are correctly set up:\ndotnet build\rRun the WebUI project to confirm the application starts correctly:\ndotnet run --project src/MerchStore.WebUI\rOpen a browser and navigate to:\nhttps://localhost:\u0026lt;port\u0026gt;\rVerify the default ASP.NET Core template loads correctly.\n‚úÖ Expected Results\nBuild succeeds without errors ASP.NET Core default page loads correctly in the browser The solution has the following structure inside the src directory: MerchStore.Domain (Class Library) MerchStore.Application (Class Library - references Domain) MerchStore.Infrastructure (Class Library - references Application) MerchStore.WebUI (ASP.NET Core MVC - references Infrastructure and Application) üîß Troubleshooting If you encounter issues:\nCheck that your .NET SDK version is 9.0 or newer with dotnet --version Ensure all project references are correctly set up Verify that the folder paths are created correctly Make sure the WebUI project runs with the default template üìö Further Reading Clean Architecture by Robert C. Martin - The definitive guide ASP.NET Core Clean Architecture - Microsoft documentation Clean Architecture with .NET Core - Jason Taylor\u0026rsquo;s practical approach Done! üéâ Great job! You\u0026rsquo;ve successfully set up the foundation for a Clean Architecture solution with proper organization using a src directory. This structure separates your source code from other solution artifacts, making it easier to add test projects, documentation, and other resources later. üöÄ\n","date":"2023-09-07","id":6,"permalink":"/docs/exercises/setting-up-a-clean-architecture-solution/","summary":"\u003ch2 id=\"-goal\"\u003eüéØ Goal\u003c/h2\u003e\n\u003cp\u003eCreate the foundation for a merchandise store application by setting up a Clean Architecture solution structure with the correct project dependencies, organizing all source code in a \u003ccode\u003esrc\u003c/code\u003e directory.\u003c/p\u003e","tags":[],"title":"Setting Up a Clean Architecture Solution"},{"content":"","date":"2023-09-07","id":7,"permalink":"/docs/reference/","summary":"","tags":[],"title":"Reference"},{"content":"Reference pages are ideal for outlining how things work in terse and clear terms. Less concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what your documenting.\nFurther reading Read about reference in the Di√°taxis framework ","date":"2023-09-07","id":8,"permalink":"/docs/reference/example-reference/","summary":"\u003cp\u003eReference pages are ideal for outlining how things work in terse and clear terms. Less concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what your documenting.\u003c/p\u003e","tags":[],"title":"Example Reference"},{"content":"Link to valuable, relevant resources.\n","date":"2024-02-27","id":9,"permalink":"/docs/resources/","summary":"\u003cp\u003eLink to valuable, relevant resources.\u003c/p\u003e","tags":[],"title":"Resources"},{"content":"","date":"2023-09-07","id":10,"permalink":"/docs/","summary":"","tags":[],"title":"Docs"},{"content":"","date":"2023-09-07","id":11,"permalink":"/privacy/","summary":"","tags":[],"title":"Privacy Policy"},{"content":"","date":"2023-09-07","id":12,"permalink":"/","summary":"","tags":[],"title":"Welcome to Doks"},{"content":"","date":"0001-01-01","id":13,"permalink":"/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":14,"permalink":"/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":15,"permalink":"/tags/","summary":"","tags":[],"title":"Tags"}]